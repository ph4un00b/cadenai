import { useEffect, useRef, useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { customAlphabet } from "nanoid";
import { signIn, signOut } from "next-auth/react";

import { api } from "~/utils/api";
import { useSubscription } from "~/utils/pusher.hook";

const nanoid = customAlphabet("abcde0123456789", 4);

function Home() {
	const router = useRouter();

	const createRoom = () => {
		const id = nanoid();
		void router.push(`/rooms/${id}`);
	};

	return (
		<>
			<Head>
				<title>app de phau</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="flex h-screen flex-col items-center bg-gradient-to-b from-[#230053] to-[#101225] text-slate-50">
				<div className="container mt-12 flex flex-col items-center justify-center gap-4 px-4 py-8">
					<h1 className="text-5xl font-extrabold tracking-tight sm:text-[5rem]">
						<span className="text-pink-500">CadenAI ü§ó!</span>
					</h1>
					<AuthShowcase />

					<button
						onClick={createRoom}
						className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
					>
						create room!
					</button>

					<Chain />
					<Query />
					<Template />
					<Agent />
					<Memory />
					<Redis />
					<Streaming />
					{/* @todo: fix sql prompt! ‚ùì */}
					{/* <MemoryMysql /> */}
				</div>
			</main>
		</>
	);
}

function Streaming() {
	const [AiReply, setAiReply] = useState("");
	const [AiChunk, setAiChunk] = useState("");
	const streaming = api.ai.streaming.useQuery();
	useSubscription<string>("ai-reply", (data) => {
		setAiReply(data);
	});
	useSubscription<string>("ai-chunk", (chunk) => {
		console.log(JSON.stringify(chunk));
		setAiChunk((prevChunk) => prevChunk + chunk);
	});
	return (
		<>
			<section>
				{streaming.isLoading ? (
					<p>thinking...</p>
				) : (
					<>
						<h2>AI streaming-call: {streaming.data?.payload}</h2>
					</>
				)}
				<br />
				<p>{AiChunk}</p>
				<p>{AiReply}</p>
			</section>
		</>
	);
}

function _MemoryMysql() {
	const mysql = api.ai.mysql.useQuery();
	const [recall, setRecall] = useState(false);

	useTimeout(() => {
		setRecall(true);
	}, 6000);

	return (
		<>
			<section>
				{mysql.isLoading ? (
					<p>thinking...</p>
				) : (
					<h2>AI mysql-call: {mysql.data?.payload}</h2>
				)}
			</section>
			{recall ? <Memory2Mysql /> : <p>waiting...</p>}
		</>
	);
}

function Memory2Mysql() {
	const mysql2 = api.ai.mysql2.useQuery();
	return (
		<section>
			{mysql2.isLoading ? (
				<p>thinking...</p>
			) : (
				<h2>AI mysql2-call: {mysql2.data?.payload}</h2>
			)}
		</section>
	);
}

function Redis() {
	const redis = api.ai.redis.useQuery();
	const [recall, setRecall] = useState(false);

	useTimeout(() => {
		setRecall(true);
	}, 6000);

	return (
		<>
			<section>
				{redis.isLoading ? (
					<p>thinking...</p>
				) : (
					<h2>AI redis-call: {redis.data?.payload}</h2>
				)}
			</section>
			{recall ? <Redis2 /> : <p>waiting...</p>}
		</>
	);
}

function Redis2() {
	const memory = api.ai.redis2.useQuery();
	return (
		<section>
			{memory.isLoading ? (
				<p>thinking...</p>
			) : (
				<h2>AI redis2-call: {memory.data?.payload}</h2>
			)}
		</section>
	);
}

function Memory() {
	const memory = api.ai.memory.useQuery();
	const [recall, setRecall] = useState(false);

	useTimeout(() => {
		setRecall(true);
	}, 6000);

	return (
		<>
			<section>
				{memory.isLoading ? (
					<p>thinking...</p>
				) : (
					<h2>AI memory-call: {memory.data?.payload}</h2>
				)}
			</section>
			{recall ? <Memory2 /> : <p>waiting...</p>}
		</>
	);
}

function useTimeout(callback: () => void, delay: number) {
	const savedCallback = useRef<() => void>(null!);

	useEffect(() => {
		savedCallback.current = callback;
	});

	useEffect(() => {
		function tick() {
			savedCallback.current();
		}

		const id = window.setTimeout(tick, delay);
		return () => window.clearTimeout(id);
	}, [delay]);
}

function Memory2() {
	const memory = api.ai.memory2.useQuery();
	return (
		<section>
			{memory.isLoading ? (
				<p>thinking...</p>
			) : (
				<h2>AI memory2-call: {memory.data?.payload}</h2>
			)}
		</section>
	);
}

function Agent() {
	const agent = api.ai.agent.useQuery();
	return (
		<section>
			{agent.isLoading ? (
				<p>thinking...</p>
			) : (
				<h2>AI agent-call: {agent.data?.payload}</h2>
			)}
		</section>
	);
}

function Chain() {
	const chain = api.ai.chain.useQuery();
	return (
		<section>
			{chain.isLoading ? (
				<p>thinking...</p>
			) : (
				<h2>AI chain-call: {chain.data?.payload}</h2>
			)}
		</section>
	);
}

function Query() {
	const call = api.ai.call.useQuery();
	return (
		<section>
			{call.isLoading ? (
				<p>thinking...</p>
			) : (
				<h2>AI call: {call.data?.payload}</h2>
			)}
		</section>
	);
}

function Template() {
	const template = api.ai.template.useQuery();
	return (
		<section>
			{template.isLoading ? (
				<p>thinking...</p>
			) : (
				<h2>AI template-call: {template.data?.payload}</h2>
			)}
		</section>
	);
}

export default Home;

const AuthShowcase: React.FC = () => {
	const { data: session } = api.auth.getSession.useQuery();

	const { data: secretMessage } = api.auth.getSecretMessage.useQuery(
		undefined, // no input
		{ enabled: !!session?.user },
	);

	return (
		<div className="flex flex-col items-center justify-center gap-4">
			{session?.user && (
				<p className="text-center text-2xl text-white">
					{session && <span>Logged in as {session?.user?.name}</span>}
					{secretMessage && <span> - {secretMessage}</span>}
				</p>
			)}
			<button
				className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
				onClick={session ? () => void signOut() : () => void signIn()}
			>
				{session ? "Sign out" : "Sign in"}
			</button>
		</div>
	);
};
